import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 * 
 * @author Hanat Sharif
 * 
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     * 
     * <html>
     * <head>
     * <title>the channel tag title as the page title</title>
     * </head>
     * <body>
     *  <h1>the page title inside a link to the <channel> link</h1>
     *  <p>the channel description</p>
     *  <table border="1">
     *   <tr>
     *    <th>Date</th>
     *    <th>Source</th>
     *    <th>News</th>
     *   </tr>
     * 
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        

     // Default values if elements are not found
        String title = "RSS Feed"; // Default title
        String link = "#"; // Default link
        String description = "No description available."; // Default description

        // Find and set title if it exists
        int titleIndex = getChildElement(channel, "title");
        if (titleIndex != -1 && channel.child(titleIndex).numberOfChildren() > 0) {
            title = channel.child(titleIndex).child(0).label();
        }

        // Find and set link if it exists
        int linkIndex = getChildElement(channel, "link");
        if (linkIndex != -1 && channel.child(linkIndex).numberOfChildren() > 0) {
            link = channel.child(linkIndex).child(0).label();
        }

        // Find and set description if it exists
        int descriptionIndex = getChildElement(channel, "description");
        if (descriptionIndex != -1 && channel.child(descriptionIndex).numberOfChildren() > 0) {
            description = channel.child(descriptionIndex).child(0).label();
        }

        // Output the HTML header with the values
        out.println("<html><head><title>" + title + "</title></head><body>");
        out.println("<h1><a href=\"" + link + "\">" + title + "</a></h1>");
        out.println("<p>" + description + "</p>");
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

    }
         
    

    /**
     * Outputs the "closing" tags in the generated HTML file.  These are the
     * expected elements generated by this method:
     * 
     *  </table>
     * </body>
     * </html>
     * 
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

       
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     * 
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

    
        int i = 0; // Initialize the loop counter
        int result = -1; // Initialize the result to -1, indicating not found

        // While loop to iterate through the children of xml
        while (i < xml.numberOfChildren() && result == -1) {
            if (xml.child(i).isTag() && xml.child(i).label().equals(tag)) {
                result = i; // Set result to the current index if the tag matches
            }
            i++; // Increment the loop counter
        }

        return result; // Return the index of the found tag or -1 if not found
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     * 
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires
     * [the label of the root of item is an <item> tag] and out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

      
        // Start table row
        out.println("<tr>");

        // Publication Date
        String date = "No date available";
        int dateIn = getChildElement(item, "pubDate");
        if (dateIn != -1 && item.child(dateIn).numberOfChildren() > 0) {
            date = item.child(dateIn).child(0).label();
        }
        out.println("<td>" + date + "</td>");

        // Source
        String sourceText = "No source available";
        String sourceURL = ""; // Initialize empty only used if a URL is present
        int sourceIn = getChildElement(item, "source");
        if (sourceIn != -1 && item.child(sourceIn).numberOfChildren() > 0) {
            sourceText = item.child(sourceIn).child(0).label();
            // Check if a URL attribute exists for the source
            if (item.child(sourceIn).hasAttribute("url")) {
                sourceURL = item.child(sourceIn).attributeValue("url");
            }
        }
        // Print source with or without a link based on sourceURL content
        if (!sourceURL.isEmpty()) {
            out.println("<td><a href=\"" + sourceURL + "\">" + sourceText + "</a></td>");
        } else {
            out.println("<td>" + sourceText + "</td>");
        }

        // Title or Description
        String content = "No title or description available";
        int titleIn = getChildElement(item, "title");
        int descriptionIn = getChildElement(item, "description");
        String linkURL = ""; // Initialize empty, used if a link is present
        int linkIn = getChildElement(item, "link");
        if (linkIn != -1 && item.child(linkIn).numberOfChildren() > 0) {
            linkURL = item.child(linkIn).child(0).label();
        }

        // Choose title over description if both are present
        if (titleIn != -1 && item.child(titleIn).numberOfChildren() > 0) {
            content = item.child(titleIn).child(0).label();
        } else if (descriptionIn != -1 && item.child(descriptionIn).numberOfChildren() > 0) {
            content = item.child(descriptionIn).child(0).label();
        }

        // Print content with or without a link based on linkURL content
        out.print("<td>");
        if (!linkURL.isEmpty()) {
            out.print("<a href=\"" + linkURL + "\">" + content + "</a>");
        } else {
            out.print(content);
        }
        out.println("</td>");
 
        // Ending table row
        out.println("</tr>");
    }
    /**
     * Main method.
     * 
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
   

     // Prompt for RSS feed URL
        out.print("Enter the URL of an RSS 2.0 news feed: ");
        String rssFeedUrl = in.nextLine();

        // Initialize XMLTree with the given URL
        XMLTree rssFeed = new XMLTree1(rssFeedUrl);

        // Validate the RSS feed is version 2.0
        if ("rss".equals(rssFeed.label()) && rssFeed.hasAttribute("version") && "2.0".equals(rssFeed.attributeValue("version"))) {
            // Prompt for output HTML file name
            out.print("Enter the output file adding .html extension: ");
            String outputHtmlFilename = in.nextLine();
            SimpleWriter htmlOutput = new SimpleWriter1L(outputHtmlFilename);

            // Process the RSS feed into HTML
            XMLTree channel = rssFeed.child(0);

            outputHeader(channel, htmlOutput);

            // Process each item within the channel
            for (int i = 0; i < channel.numberOfChildren(); i++) {
                XMLTree child = channel.child(i);
                if ("item".equals(child.label())) {
                    processItem(child, htmlOutput);
                }
            }

            outputFooter(htmlOutput);
            
            out.println("RSS feed works! " + outputHtmlFilename);

            // Close the SimpleWriter to finalize the output
            htmlOutput.close();
        } else {
            out.println("The URL does not work for a valid RSS feed.");
        }

        
        in.close();
        out.close();
    }

}
